# 1.to check leap year

puts "Enter the year"
yr = gets.chomp.to_i
if yr % 400 == 0
	puts " it is a leap year"
else
	puts "it is not a leap year"
end


#2.to check the number is positive or negative

puts "Enter number: ";
num = gets.chomp.to_i;  

msg=num>0 ? "POSITIVE" : "NEGATIVE"; 
puts "Number is: ",msg;


#3.to check the number is even or odd

puts "Enter number: ";
number = gets.chomp.to_i;  
Msg = (number%2==0) ? "EVEN" : "ODD";
puts "Number is: ",Msg;


# 4.to find largest of 3 numbers
x,y,z = 2,5,4
if x >= y and x >= z
     puts "x = #{x} is greatest."
elsif y >= z and y >= x 
     puts "y = #{y} is greatest."
else 
     puts "z = #{z} is greatest."
end
#5. to find smallest 0f 3 number
x,y,z = 2,5,4
if x <= y and x <= z
     puts "x = #{x} is smallest."
elsif y <= z and y <= x 
     puts "y = #{y} is smallest."
else 
     puts "z = #{z} is smallest."
end


# to find a factorial of anumber
puts "Enter the number"
num=gets.chomp.to_i
i = 1
fact = 1

while i <= num  #implementation of while loop
    fact *= i
    i += 1
end
puts "The factorial of #{num} is #{fact}"


# To generate multiplication table
puts "Enter the number:"
num=gets.chomp.to_i

for i in 1..10
	mult=num*i
	puts "#{num} * #{i} = #{mult}"
end
# to print Fibonacci series
first=0
second=1
nextterm=0

puts "Enter the number of terms:-"
n=gets.chomp.to_i

puts "The first #{n} terms of Fibonacci series are:-"
c=1
while(c<=n+1)
	if(c<=1)
		nextterm=c
	else
		puts nextterm
		nextterm=first+second
		first=second
		second=nextterm
	end
	c+=1
end


# to find GCD of two numbers
def calculateGCD(a, b)
    while (a != b)
        if a > b
            return calculateGCD(a - b, b);
        else
            return calculateGCD(a, b - a);
        end
    end
    
    return a;
end

print "Enter number1: ";
number1 = gets.chomp.to_i;  

print "Enter number2: ";
number2 = gets.chomp.to_i;  

result = calculateGCD(number1, number2);

print "GCD is: ",result;
#to count the number of digits in an integer
puts "Enter the number:"
num=gets.chomp.to_i

temp=num
count=0

while (temp>0)
	count+=1
	temp=temp/10
end

puts "#{num} has #{count} digits"
# to calculate the power if a number
def pow(a,b)
	power=1
	for i in 1..b
		power=power*a
	end
	return power
end

puts "Enter Base:-"
base=gets.chomp.to_i

puts "Enter exponent:-"
expo=gets.chomp.to_i

puts "The power is #{pow(base,expo)}"
#to check the number is prime number
puts "Enter the number:"
num=gets.chomp.to_i
count=0
if (num==0)
	puts "0 is not prime"
else
	
	i=2
	while(i<num)
		if (num%i==0)
			count+=1
		end
		i+=1
	end
	
end
	if count>1
		puts "#{num} is not a prime number"
	else
		puts "#{num} is a prime number"
	end
  
  
# program to reverse a string
puts "Enter a string"
strr= gets()
puts strr.reverse

#display prime numbers
p "enter 1st index"
a = gets.chomp.to_i
p "enter second index"
b = gets.chomp.to_i
require 'prime'

for i in a..b
    if Prime.prime?(i)
        puts i
    end
 
    end
    
 #binary to decimal
 p '101010'.to_i(2)
p 42.to_s(2)

#octal to decimal

class MyNumber

	def octal_to_decimal(number)
	
		result = 0
		multiplier = 1
		remainder = 0
		flag = 0
		print(" Octal : ", number)
		if (number < 0)
		

			number = -number
			flag = 1
		end
		while (number != 0)
		
			remainder = number % 10
			result = (remainder * multiplier) + result
			multiplier *= 8
			number = number / 10
		end
		if (flag == 1)
		
			result = -result
		end
		print(" Decimal : ", result ," \n\n")
	end
end
def main()

	obj = MyNumber.new()

	obj.octal_to_decimal(42)
	obj.octal_to_decimal(18)
	obj.octal_to_decimal(25)
	obj.octal_to_decimal(-173)
end
main()

p '42'.to_i(2)


#hexadecimal to octal
p "01".to_i(16)
p '16'.to_i(2)


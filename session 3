#palindrome
variable = "abaersses"
def check_palindromic(variable)
    if variable.reverse == variable 
      puts "#{ variable } is a palindrome."
    else 
      puts "#{ variable } is not a palindrome."
    end
  end
  
  #2D array
  require 'matrix'
m1 = Matrix[[1,7,4,2], [3,4,5,6], [7,8,3,10]]
puts m1.to_a.map(&:inspect)

#compare elements b/w diff array
a = [1, 2, 3]
b = [1, 4, 3]
p a==b
p a.zip(b).map { |x, y| x == y }

#linear search
arr = [12,45,23,39,37];

i    =   0;
item =   0;
flag =   0;

print "Enter item: ";
item = gets.chomp.to_i;  

flag = -1
while(i<arr.size)
    if(arr[i]==item)
        flag = i;
        break;
    end
    i = i + 1;
end

        
if(flag>=0)
    print "Item found at index: ",flag,"\n"; 
else
    print "Item not found\n"; 
end
#binary search
array= ['one', 'two', 'three', 'four', 'five']
p search = array.sort.bsearch { |value| 'four' <=> value }


#GCD number
num1 = 10
num2 = 15
num3 = 21
num4 = 14
puts num1.gcd(num2)
puts num3.gcd(num4)


#LCM number
num1 = 10
num2 = 15
num3 = 21
num4 = 14

puts num1.lcm(num2)
puts num3.lcm(num4)

#add two matrix
= ['one', 'two', 'three', 'four', 'five']
p search = array.sort.bsearch { |value| 'four' <=> value }

#multiply two matrix
m = Matrix[[1,2,3],[1,2,3]]
p m*2
p (m*3).to_a


#transpose matrix
require "matrix"
mat1 = Matrix[[3, 12], [2, 8]]
puts mat1.transpose()

#avarage of num
require "matrix"
mat1 = Matrix[[3, 12], [2, 8]]
puts mat1.transpose()

#check if value present
require 'matrix'
m = Matrix[[1,2,3],[1,2,3]]
p m*2
p (m*3).to_a

#merge two arrays
a = [1, 3, 5, 6]
b = [2, 3, 4, 5]
p c = (a + b).uniq

#arrays are equal or not
a = [1, 2, 3, 4, 5, 6]
b = [1, 2, 3, 4, 5, 6]
b1= [1, 2,5,4,3, 4, 5, 6]
p a==b
p a.eql?(b1)


#common array elements
p ['Cup', 'Desk', 'Board'].include? 'Dog'
p [01,2,33,36,5,4,44].include? 44
make acopy of array


#array roation
a = [18, 22, 33, nil, 5, 6]
b = [1, 4, 1, 1, 88, 9]
c = [18, 22, 50, 6]
puts "rotate() method form : #{a.rotate(2)}\n\n"
puts "rotate() method form : #{b.rotate(1)}\n\n"
puts "rotate() method form : #{c.rotate(-1)}\n\n"
